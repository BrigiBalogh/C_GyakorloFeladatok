C# -kivételkezelés

3️⃣ Összehasonlítás – Melyiket válaszd?
Modern (?., ??)	Klasszikus (IsNullOrEmpty, if)
Tömör, könnyen olvasható	Részletesebb és biztonságosabb
Egyszerű értékellenőrzésekhez	Kritikusabb helyzetekben megbízhatóbb
Nem ad vissza konkrét hibát (null marad)	Könnyen naplózható és logikát adhatsz hozzá
Nem dob kivételt, csak alapértelmezett értéket ad vissza	Dobhatsz kivételt, ha fontos a validáció
4️⃣ Melyiket ajánlom?
Egyszerű, nem kritikus helyzetekben (pl. hosszúság lekérése, alapértelmezett érték visszaadása) használj ?. vagy ?? operátort.
Ha fontos a validáció vagy hibakezelés, például felhasználói input vagy adatbázis műveleteknél, akkor használd az if és IsNullOrEmpty vagy kivételkezelést (try-catch).


1️⃣ ?. (Null-conditional operator) – Ellenőrzés null értékre és biztonságos elérés
Mi történik?

Az ?. akkor használható, ha egy objektum vagy változó null is lehet, és csak akkor akarod meghívni a metódust vagy elérni a property-t, ha nem null.
Ha null, akkor nem dob kivételt, csak null-t ad vissza.
Példa:

csharp
Másolás
Szerkesztés
string input = null;

// Hosszúság lekérése biztonságosan
int length = input?.Length ?? 0;  // Ha input null, a length értéke 0 lesz, különben a string hossza
Console.WriteLine($"Input length: {length}");
Magyarázat:

?.Length – Ha az input null, nem történik semmi, csak null-t ad vissza.
?? 0 – Ha az eredmény null, akkor a hosszúság 0 lesz.
2️⃣ ?? (Null-coalescing operator) – Alapértelmezett érték adása
Mi történik?

Az ?? operátor visszaadja a bal oldali kifejezés értékét, kivéve ha az null, ekkor a jobb oldali értéket adja vissza.
Példa:

csharp
Másolás
Szerkesztés
string input = null;

// Ha input null, használjuk az alapértelmezett értéket
string result = input ?? "Default Value";
Console.WriteLine($"Result: {result}");
Magyarázat:

Az ?? helyettesíti a klasszikus if ellenőrzést:
csharp
Másolás
Szerkesztés
string result = (input != null) ? input : "Default Value";
3️⃣ IsNullOrEmpty és if ellenőrzés
Ez a klasszikus módszer, amely részletesebb hibakezelést tesz lehetővé.

Példa:

csharp
Másolás
Szerkesztés
string input = Console.ReadLine();

if (!string.IsNullOrEmpty(input))
{
    Console.WriteLine($"You entered: {input}");
}
else
{
    Console.WriteLine("Input is null or empty.");
}
Előnye:

Jobb kontrollt biztosít a null érték kezelésére.
Naplózhatod vagy feldobhatsz kivételt, ha az érték nem elfogadható.
4️⃣ Összehasonlítás ugyanarra a problémára:
Feladat: Szám átalakítása null érték ellenőrzéssel
Modern (?? és ?.) módszer:

csharp
Másolás
Szerkesztés
string input = Console.ReadLine();
int? number = int.TryParse(input, out int result) ? result : (int?)null;
int finalNumber = number ?? 0;  // Ha null, akkor az érték 0 lesz.
Console.WriteLine($"Parsed number: {finalNumber}");
Klasszikus if módszer:

csharp
Másolás
Szerkesztés
string input = Console.ReadLine();
int number = 0;

if (!string.IsNullOrEmpty(input) && int.TryParse(input, out number))
{
    Console.WriteLine($"Parsed number: {number}");
}
else
{
    Console.WriteLine("Invalid or null input.");
}
Mikor melyiket válaszd?
?. és ??: Egyszerű, rövid ellenőrzéseknél, amikor csak alapértelmezett értéket szeretnél visszaadni.
if és IsNullOrEmpty: Ha komplexebb logikára vagy hibakezelésre van szükség.